#include "ArrayRingBuffer.h"
#include "LinkedListRingBuffer.h"


int main()
{
    LinkedListRingBuffer<int> llrb = LinkedListRingBuffer<int>();

    llrb.EnQueue(25);
    llrb.EnQueue(16);
    llrb.EnQueue(20);
    llrb.EnQueue(8);
    llrb.EnQueue(12);
    llrb.DeQueue();

    llrb.OutputInfo();

    ArrayRingBuffer<int> rb = ArrayRingBuffer<int>(3);

    rb.EnQueue(12);
    rb.EnQueue(14);
    rb.EnQueue(15);
    rb.DeQueue();
    rb.EnQueue(16);

    rb.OutputInfo();
}

/*
Описание решения:

В данном решении было реализованно два типа циклических буферов.
Первое решение представляет собой использование массива со статическим размером.
Второе решение представляет собой использование одностороннего линкед листа.

Плюсы минусы:
Плюсом первой реализации является то что элемент в буффере занимает sizeof(T).
Минусом реализации по сравнени со второй является невозможность расширения размера массива после инициализации
(если бы даже был реализован resize массива, работало бы это хуже, так как память увеличивалась бы в два раза а не на один элемент)

Плюсом второй реализации является динамическая размерность, размер раширяется на каждый добавляемый элемент
(так же и при dequeue элементы уменьшаются соотвественно).
Минусом второй реализации является увеличением размера элемента в буффере(sizeof(T) + 4 байта(или 8 байт в зависимости от разрядности системы)).

*/